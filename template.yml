---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'GitHub Bot Example'
Parameters:
  GitHubRepoURL:
    Description: 'Target GitHub Repo'
    Type: String
    Default: ''
Resources:
  WebhookFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code: 'lambda-src/webhook_handler/'
      Description: 'Function to accept github webhook and put comment'
      Environment:
        Variables:
          CODEBUILD: !Ref CodeBuildProject
      FunctionName: !Sub "${AWS::StackName}-webhook_handler"
      Handler: index.handler
      Role: !GetAtt 'WebhookFunctionRole.Arn'
      Runtime: nodejs10.x
      Timeout: 10
  WebhookFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
      - PolicyName: CodeBuildAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - codebuild:*
            Effect: Allow

  CodeBuildEventFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code: 'lambda-src/cw_handler/'
      Description: 'Function to accept CodeBuild events and put comment'
      Environment:
        Variables:
          CODEBUILD: !Ref CodeBuildProject
      FunctionName: !Sub "${AWS::StackName}-codebuild_handler"
      Handler: index.handler
      Role: !GetAtt 'CodeBuildEventFunctionRole.Arn'
      Runtime: nodejs10.x
      Timeout: 10
  CodeBuildEventFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: LambdaLogging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow

  WebhookRestApiPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref WebhookFunction
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebhookRestApi}/*/POST/'
  WebhookRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub "${AWS::StackName}-webhook_api"
  WebhookRestAPIStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref WebhookRestAPIDeployment
      RestApiId: !Ref WebhookRestApi
      StageName: webhook
  WebhookRestAPIDeployment:
    DependsOn: WebhookRestApiMethod
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref WebhookRestApi
  WebhookRestApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: 'POST'
        PassthroughBehavior: 'WHEN_NO_MATCH'
        Type: 'AWS_PROXY'
        Uri: !Sub
        - 'arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations'
        - Region: !Ref 'AWS::Region'
          LambdaFunctionArn: !GetAtt 'WebhookFunction.Arn'
      ResourceId: !GetAtt 'WebhookRestApi.RootResourceId'
      RestApiId: !Ref WebhookRestApi

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/python:3.6.5'
        Type: 'LINUX_CONTAINER'
      Name: !Sub "${AWS::StackName}-PullRequest"
      ServiceRole: !ImportValue CodeBuildRoleArn
      Source:
        Type: GITHUB
        Location: !Ref GitHubRepoURL
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: "AWS-CodeBuild-Service-Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                  - "cloudformation:ValidateTemplate"
                Resource: "*"

  CodeBuildEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Triggers when builds fail/pass in CodeBuild"
      EventPattern:
        source:
          - "aws.codebuild"
        detail-type:
          - "CodeBuild Build State Change"
        detail:
          build-status:
            - "FAILED"
            - "SUCCEEDED"
          project-name:
            - !Ref CodeBuildProject
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt 'CodeBuildEventFunction.Arn'
          Id: !Sub "${AWS::StackName}-CodeBuild"
  PermissionForEventsToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref CodeBuildEventFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CodeBuildEventRule.Arn

Outputs:
  Url:
    Value: !Sub 'https://${WebhookRestApi}.execute-api.${AWS::Region}.amazonaws.com/${WebhookRestAPIStage}'
